{"version":3,"sources":["HeaderForm/HeaderForm.js","Todo/Todo.js","TodoList/TodoList.js","FilterTodos/FilterTodos.js","App.js","index.js"],"names":["HeaderForm","state","title","handleInput","target","setState","value","trimStart","handleOnSubmitForm","event","preventDefault","props","addTodo","className","onSubmit","this","placeholder","onChange","React","Component","Todo","todo","removeTodo","changeStatus","classNames","view","editing","completed","type","id","checked","onClick","TodoList","todos","map","key","FilterTodos","setFilter","clearCompleted","filter","length","href","selected","all","text","active","App","newId","toLowerCase","getFiltredTodos","toggleAll","isCompletedAll","every","allTodos","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.55d34159.chunk.js","sourcesContent":["import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nexport class HeaderForm extends React.Component {\n  state = {\n    title: '',\n  }\n\n  handleInput = ({ target }) => {\n    this.setState({ title: target.value.trimStart() });\n  }\n\n  handleOnSubmitForm = (event) => {\n    event.preventDefault();\n    this.props.addTodo(this.state.title);\n    this.setState({ title: '', })\n  }\n\n  render() {\n    return (\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <form onSubmit={this.handleOnSubmitForm}>\n          <input\n            value={this.state.title}\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            onChange={this.handleInput}\n          />\n        </form>\n      </header>\n    );\n  }\n}\n\nHeaderForm.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport classNames from 'classnames';\n\nexport const Todo = ({ todo, removeTodo, changeStatus }) => (\n  <li className={classNames(\n    {\n      view: true,\n      editing: false,\n      completed: todo.completed,\n    },\n  )}\n  >\n    <input\n      type=\"checkbox\"\n      className=\"toggle\"\n      id={todo.id}\n      checked={todo.completed}\n      onChange={event => changeStatus(+event.target.id)}\n    />\n    <label>{todo.title}</label>\n    <button\n      type=\"button\"\n      className=\"destroy\"\n      id={todo.id}\n      onClick={() => removeTodo(todo.id)}\n    />\n    <input type=\"text\" className=\"edit\" />\n  </li>\n);\n\nTodo.propTypes = {\n  removeTodo: PropTypes.func.isRequired,\n  changeStatus: PropTypes.func.isRequired,\n  todo: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }),\n};\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport { Todo } from '../Todo/Todo';\n\nexport const TodoList = ({ todos, removeTodo, changeStatus }) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <Todo\n        key={todo.id}\n        todo={todo}\n        removeTodo={removeTodo}\n        changeStatus={changeStatus}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  removeTodo: PropTypes.func.isRequired,\n  changeStatus: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  })),\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport const FilterTodos = ({ setFilter, clearCompleted, todos, filter }) => (\n  <>\n    <span className=\"todo-count\">\n      {todos.filter(todo => !todo.completed).length}\n      {' '}\n      items left\n    </span>\n\n    <ul className=\"filters\">\n      <li>\n        <a\n          href=\"#/\"\n          className={classNames({selected: filter.all})}\n          onClick={event => setFilter(event.target.text)}\n        >\n          All\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/active\"\n          className={classNames({selected: filter.active})}\n          onClick={event => setFilter(event.target.text)}\n        >\n          Active\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/completed\"\n          className={classNames({selected: filter.completed})}\n          onClick={event => setFilter(event.target.text)}\n        >\n          Completed\n        </a>\n      </li>\n    </ul>\n\n    { todos.filter(todo => todo.completed).length\n      ? (\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={() => clearCompleted()}\n        >\n          Clear completed\n        </button>\n      )\n      : ''\n    }\n  </>\n);\n\nFilterTodos.propTypes = {\n  setFilter: PropTypes.func.isRequired,\n  clearCompleted: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  })),\n  filter: PropTypes.string.isRequired,\n};\n","import React from 'react';\n\nimport { HeaderForm } from './HeaderForm/HeaderForm';\nimport { TodoList } from './TodoList/TodoList';\nimport { FilterTodos } from './FilterTodos/FilterTodos';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    newId: 1,\n    filter: {\n      all: true,\n      active: false,\n      completed: false,\n    },\n  }\n\n  addTodo = (title) => {\n    if (!title) {\n      return;\n    }\n\n    this.setState(state => ({\n      todos: [\n        ...state.todos,\n        {\n          title,\n          id: state.newId,\n          completed: false,\n        },\n      ],\n      newId: state.newId + 1,\n    }));\n  }\n\n  removeTodo = (id) => {\n    this.setState(state => ({\n      todos: state.todos.filter(todo => todo.id !== id),\n    }));\n  }\n\n  changeStatus = (id) => {\n    this.setState(state => ({\n      todos: state.todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return {\n          ...todo,\n        };\n      }),\n    }));\n  }\n\n  setFilter = (filter) => {\n    this.setState(\n      { \n        filter: {\n          all: false,\n          active: false,\n          completed: false,\n          [filter.toLowerCase()]: true,\n        },\n      }\n    );\n  }\n\n  getFiltredTodos = (todos) => {\n    if (this.state.filter.completed) {\n      todos = todos.filter(todo => todo.completed);\n    }\n\n    if (this.state.filter.active) {\n      todos = todos.filter(todo => !todo.completed);\n    }\n\n    return todos;\n  }\n\n  clearCompleted = () => {\n    this.setState(state => ({\n      todos: state.todos.filter(todo => !todo.completed),\n    }));\n  }\n\n  toggleAll = ({ target }) => {\n    this.setState(state => ({\n      todos: state.todos.map(todo => ({\n        ...todo,\n        completed: target.checked,\n      })),\n    }));\n  }\n\n  isCompletedAll = () => (\n    this.state.todos.every(todo => todo.completed)\n  )\n\n  render() {\n    const allTodos = this.getFiltredTodos([...this.state.todos]);\n\n    return (\n      <section className=\"todoapp\">\n        <HeaderForm\n          addTodo={this.addTodo}\n        />\n\n        <section className=\"main\">\n          {this.state.todos.length > 0 &&\n            (<input\n              type=\"checkbox\"\n              id=\"toggle-all\"\n              className=\"toggle-all\"\n              checked={this.isCompletedAll()}\n              onClick={event => this.toggleAll(event)}\n            />)\n          }\n          <label htmlFor=\"toggle-all\" />\n          <TodoList\n            todos={allTodos}\n            removeTodo={this.removeTodo}\n            changeStatus={this.changeStatus}\n          />\n        </section>\n\n        { this.state.todos.length > 0 &&\n           (\n            <footer className=\"footer\">\n              <FilterTodos\n                filter={this.state.filter}\n                setFilter={this.setFilter}\n                clearCompleted={this.clearCompleted}\n                todos={allTodos}\n              />\n            </footer>\n          )\n        }\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}